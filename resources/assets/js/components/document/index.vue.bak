<template>
	<div class="container">
		<h4>List of Documents <router-link to="/add-documents" class="btn btn-round btn-primary btn-sm">Add</router-link></h4>
		
		<div class="loading" v-if="loading">Loading&#8230;</div>
		<div class="search-wrapper">
    <input type="text" v-model="search" placeholder="Search title.."/>
        <label>Search title:</label>
  	</div>
		<table class="table table-striped">
				<thead>
					<tr>
						<th>RT</th>
						<th>Code</th>
						<th @click="sort('document_title')">Title</th>
						<th>Type</th>
						<th>Date</th>
						<th></th>
						<th></th>
					</tr>
				</thead>
				<tbody>
					<tr v-for="item,key in sortedDocs">
						<td>{{ secondsToHms(item.routes.map(fields).reduce(sum, 0)) }}</td>
						<td>{{ item.document_code }}</td>
						<td>{{ item.document_title }}</td>
						<td>{{ item.document_type_prefix }}</td>
						<td>{{ item.created_at }}</td>
						<td><router-link to="/edit-document" v-on:click.native="edit(key)" class="nav-link">Edit {{key}}</router-link>
						</td>
						<td><router-link to="/view-routes" v-on:click.native="getRoute(key)" class="nav-link">Route <span class="badge badge-primary badge-sm">{{ item.routes.length }}</span></router-link>
						</td>
					</tr>
				</tbody>
		</table>
		<p>
		<button @click="prevPage">Previous</button> 
		<button @click="nextPage">Next</button>
		</p>
	</div>

</template>

<script>
	export default
	{
	  data(){
	    return{
	      lists:{},
	      loading: false,
	      temp: [],
				currentSort:'document_title',
				currentSortDir:'asc',
				pageSize:3,
  			currentPage:1,
				search:''
	    }
	  },
		computed:{
			sortedDocs:function() {
				return this.temp.sort((a,b) => {
					let modifier = 1;
					if(this.currentSortDir === 'desc') modifier = -1;
					if(a[this.currentSort] < b[this.currentSort]) return -1 * modifier;
					if(a[this.currentSort] > b[this.currentSort]) return 1 * modifier;
					return 0;
				})
				.filter((row, index) => {
					let start = (this.currentPage-1)*this.pageSize;
					let end = this.currentPage*this.pageSize;
					if(index >= start && index < end)
					return true;
				})
				;
			}
		},
		watch:{
			search(){
				if(this.search.length > 0){
					this.temp = this.lists.filter((item)=>{
						if(typeof item.document_title == 'undefined') item.document_title = "";
					else if(item.document_title == null) item.document_title = "";

						return item.document_title.toLowerCase().indexOf(this.search.toLowerCase())>-1
					})
				}
			}
		},
	  mounted(){
	  	this.getResults();
			this.getUser();
		//	console.log(this.$root.user)
	  },
	  methods:{
					sort:function(s) {
						//if s == current sort, reverse
						if(s === this.currentSort) {
							this.currentSortDir = this.currentSortDir==='asc'?'desc':'asc';
						}
						this.currentSort = s;
					},
					nextPage:function() {
						if((this.currentPage*this.pageSize) < this.temp.length) this.currentPage++;
					},
					prevPage:function() {
						if(this.currentPage > 1) this.currentPage--;
					},
					fields(id){
						var rel = new Date(id.release_at);
						var rec = new Date(id.receive_at);
						var seconds = (rel.getTime() - rec.getTime()) / 1000; //1440516958

						return seconds
					},
					sum(item1, item2){
						return item1+item2
					},
					secondsToHms(d) {
							d = Number(d);

							var h = Math.floor(d / 3600);
							var m = Math.floor(d % 3600 / 60);
							var s = Math.floor(d % 3600 % 60);

							return ('0' + h).slice(-2) + ":" + ('0' + m).slice(-2) + ":" + ('0' + s).slice(-2);
					},
	        getResults(page) {
	          this.loading = !this.loading
	            if (typeof page === 'undefined') {
	              page = 1;
	            }
	            axios.get('view-documents')
	            .then(response => {
	              this.loading = !this.loading;
	              this.lists = this.temp = this.rows = response.data
	              return response;
	            })
	        },
					getRoute(key){
						//console.log(this.lists.data[key].document_code);
						this.$root.document.barcode = this.lists.data[key].document_code
						this.$root.document.document_id = this.lists.data[key].document_id
						this.$root.document.document_type_id = this.lists.data[key].document_type_id
					},
					getUser(){
						axios.post('get-user')
							.then((response)=> {
									this.$root.user.office_id = response.data.office_id
									this.$root.user.user_id = response.data.id
								})
							.catch((error)=> this.errors = error.response.data.errors);
					},
					edit(key){
						this.$root.list = this.temp[key];
						console.log(this.$root.list)
					}
	    }
	}
</script>